% Produced by CVXGEN, 2017-09-29 03:20:58 -0400.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B = params.B;
C = params.C;
R = params.R;
q = params.q;
q_final = params.q_final;
r_0 = params.r_0;
if isfield(params, 'r_1')
  r_1 = params.r_1;
elseif isfield(params, 'r')
  r_1 = params.r{1};
else
  error 'could not find r_1'
end
if isfield(params, 'r_2')
  r_2 = params.r_2;
elseif isfield(params, 'r')
  r_2 = params.r{2};
else
  error 'could not find r_2'
end
if isfield(params, 'r_3')
  r_3 = params.r_3;
elseif isfield(params, 'r')
  r_3 = params.r{3};
else
  error 'could not find r_3'
end
if isfield(params, 'r_4')
  r_4 = params.r_4;
elseif isfield(params, 'r')
  r_4 = params.r{4};
else
  error 'could not find r_4'
end
if isfield(params, 'r_5')
  r_5 = params.r_5;
elseif isfield(params, 'r')
  r_5 = params.r{5};
else
  error 'could not find r_5'
end
if isfield(params, 'r_6')
  r_6 = params.r_6;
elseif isfield(params, 'r')
  r_6 = params.r{6};
else
  error 'could not find r_6'
end
if isfield(params, 'r_7')
  r_7 = params.r_7;
elseif isfield(params, 'r')
  r_7 = params.r{7};
else
  error 'could not find r_7'
end
if isfield(params, 'r_8')
  r_8 = params.r_8;
elseif isfield(params, 'r')
  r_8 = params.r{8};
else
  error 'could not find r_8'
end
if isfield(params, 'r_9')
  r_9 = params.r_9;
elseif isfield(params, 'r')
  r_9 = params.r{9};
else
  error 'could not find r_9'
end
if isfield(params, 'r_10')
  r_10 = params.r_10;
elseif isfield(params, 'r')
  r_10 = params.r{10};
else
  error 'could not find r_10'
end
if isfield(params, 'r_11')
  r_11 = params.r_11;
elseif isfield(params, 'r')
  r_11 = params.r{11};
else
  error 'could not find r_11'
end
u_max = params.u_max;
x_0 = params.x_0;
y_0 = params.y_0;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable u_0;
  variable y_1;
  variable u_1;
  variable y_2;
  variable u_2;
  variable y_3;
  variable u_3;
  variable y_4;
  variable u_4;
  variable y_5;
  variable u_5;
  variable y_6;
  variable u_6;
  variable y_7;
  variable u_7;
  variable y_8;
  variable u_8;
  variable y_9;
  variable u_9;
  variable y_10;
  variable u_10;
  variable y_11;
  variable x_1(3, 1);
  variable x_2(3, 1);
  variable x_3(3, 1);
  variable x_4(3, 1);
  variable x_5(3, 1);
  variable x_6(3, 1);
  variable x_7(3, 1);
  variable x_8(3, 1);
  variable x_9(3, 1);
  variable x_10(3, 1);
  variable x_11(3, 1);

  minimize(quad_form(y_0 - r_0, q) + quad_form(u_0, R) + quad_form(y_1 - r_1, q) + quad_form(u_1, R) + quad_form(y_2 - r_2, q) + quad_form(u_2, R) + quad_form(y_3 - r_3, q) + quad_form(u_3, R) + quad_form(y_4 - r_4, q) + quad_form(u_4, R) + quad_form(y_5 - r_5, q) + quad_form(u_5, R) + quad_form(y_6 - r_6, q) + quad_form(u_6, R) + quad_form(y_7 - r_7, q) + quad_form(u_7, R) + quad_form(y_8 - r_8, q) + quad_form(u_8, R) + quad_form(y_9 - r_9, q) + quad_form(u_9, R) + quad_form(y_10 - r_10, q) + quad_form(u_10, R) + quad_form(y_11 - r_11, q_final));
  subject to
    x_1 == A*x_0 + B*u_0;
    x_2 == A*x_1 + B*u_1;
    x_3 == A*x_2 + B*u_2;
    x_4 == A*x_3 + B*u_3;
    x_5 == A*x_4 + B*u_4;
    x_6 == A*x_5 + B*u_5;
    x_7 == A*x_6 + B*u_6;
    x_8 == A*x_7 + B*u_7;
    x_9 == A*x_8 + B*u_8;
    x_10 == A*x_9 + B*u_9;
    x_11 == A*x_10 + B*u_10;
    y_1 == C*x_1;
    y_2 == C*x_2;
    y_3 == C*x_3;
    y_4 == C*x_4;
    y_5 == C*x_5;
    y_6 == C*x_6;
    y_7 == C*x_7;
    y_8 == C*x_8;
    y_9 == C*x_9;
    y_10 == C*x_10;
    y_11 == C*x_11;
    abs(u_0) <= u_max;
    abs(u_1) <= u_max;
    abs(u_2) <= u_max;
    abs(u_3) <= u_max;
    abs(u_4) <= u_max;
    abs(u_5) <= u_max;
    abs(u_6) <= u_max;
    abs(u_7) <= u_max;
    abs(u_8) <= u_max;
    abs(u_9) <= u_max;
    abs(u_10) <= u_max;
cvx_end
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
vars.u_3 = u_3;
vars.u{3} = u_3;
vars.u_4 = u_4;
vars.u{4} = u_4;
vars.u_5 = u_5;
vars.u{5} = u_5;
vars.u_6 = u_6;
vars.u{6} = u_6;
vars.u_7 = u_7;
vars.u{7} = u_7;
vars.u_8 = u_8;
vars.u{8} = u_8;
vars.u_9 = u_9;
vars.u{9} = u_9;
vars.u_10 = u_10;
vars.u{10} = u_10;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
vars.x_11 = x_11;
vars.x{11} = x_11;
vars.y_1 = y_1;
vars.y{1} = y_1;
vars.y_2 = y_2;
vars.y{2} = y_2;
vars.y_3 = y_3;
vars.y{3} = y_3;
vars.y_4 = y_4;
vars.y{4} = y_4;
vars.y_5 = y_5;
vars.y{5} = y_5;
vars.y_6 = y_6;
vars.y{6} = y_6;
vars.y_7 = y_7;
vars.y{7} = y_7;
vars.y_8 = y_8;
vars.y{8} = y_8;
vars.y_9 = y_9;
vars.y{9} = y_9;
vars.y_10 = y_10;
vars.y{10} = y_10;
vars.y_11 = y_11;
vars.y{11} = y_11;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
